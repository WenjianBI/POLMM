library(POLMM)
library(POLMM)
bimFile = "C:/Users/wenji/Dropbox/software/POLMM-0.2.3/inst/extdata/nSNPs-10000-nsubj-1000-ext.bim";
famFile = "C:/Users/wenji/Dropbox/software/POLMM-0.2.3/inst/extdata/nSNPs-10000-nsubj-1000-ext.fam";
bedFile = "C:/Users/wenji/Dropbox/software/POLMM-0.2.3/inst/extdata/nSNPs-10000-nsubj-1000-ext.bed";
SampleInModel = c("f1_1","f1_2","f1_3")
setPlinkObjR(bimFile, famFile, bedFile, SampleInModel)
getOneMarkerR(c(0,1,2), F)
getOneMarkerR(0, F)
getOneMarkerR(0, F)
getOneMarkerR(0, T)
a=matrix(rnorm(6),2,3)
a
rowSums(a)
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
400e3 * 10 * 10 * 8 / 1e9
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/POLMM.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test3.cpp')
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test3.cpp')
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test3.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test3.cpp')
main1()
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test3.cpp')
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test3.cpp')
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test3.cpp')
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test3.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
Rcpp::sourceCpp('src/Main.cpp')
library(POLMM)
rm(list=ls())
?POLMM::rcpparma_innerproduct
Rcpp::sourceCpp('src/Main.cpp')
rm(list=ls())
library(POLMM)
library(POLMM)
?POLMM.Region
setwd("C:/Users/wenji/Dropbox/software/POLMM-0.3.0/inst/extdata")
bimData = data.table::fread("nSNPs-10000-nsubj-1000-ext.bim")
head(bimData)
rep(c(1,2),each = 10)
AnnoData = cbind(GENE = paste("GSET-",rep(c(1,2),each = 10)),
SNP = bimData$V2[1:10],
ANNO = "anno")
AnnoData
write.table(AnnoData, "AnnoFile.txt",row.names = F,quote = F,sep = "\t")
AnnoData = cbind(GENE = paste0("GSET-",rep(c(1,2),each = 10)),
SNP = bimData$V2[1:10],
ANNO = "anno")
write.table(AnnoData, "AnnoFile.txt",row.names = F,quote = F,sep = "\t")
library(POLMM)
?POLMM.Region
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
OutputFile
AnnoFile
POLMM.control = NULL
POLMM.control = POLMM:::check.POLMM.control(POLMM.control)
check.POLMM.control = function(POLMM.control)
{
# the below is the default setting
default.POLMM.control = list(impute.method = "bestguess",  # the below is shared parameters for both single marker testing and region-based testing
missing_cutoff = 0.15,
max_maf = 0.05,
SPAcutoff = 2,
memory.chunk = 4,
kernel = "linear.weighted",   # the below is parameters for region-based testing
method = "SKAT-O",
weights.beta = c(1,25),
weights = NULL,
r.corr = NULL)
# use the default setting or update it
if(!is.null(POLMM.control)){
if(class(POLMM.control) != "class")
stop("Argument of POLMM.control should be 'class'.")
# update the setting
ctrl.nm = names(POLMM.control)
for(nm in ctrl.nm){
default.POLMM.control[[nm]] = POLMM.control[[nm]]
}
}
POLMM.control = default.POLMM.control
# check the parameters
if(! POLMM.control$kernel %in% c("linear", "linear.weighted"))
stop("'kernel' should be 'linear' or 'linear.weighted'. Check 'Details' for more details.")
if(length(POLMM.control$weights.beta)!=2)
stop("length of 'weights.beta' should be 2. Check 'Details' for more details.")
if(any(POLMM.control$weights.beta < 0))
stop("the two elements in 'weights.beta' should be non-negative. Check 'Details' for more details.")
if(! POLMM.control$impute.method %in% c("fixed", "bestguess", "random"))
stop("'impute.method' should be 'fixed','bestguess', or 'random'. Check 'Details' for more details.")
if(POLMM.control$missing_cutoff > 1 | POLMM.control$missing_cutoff < 0)
stop("'missing_cutoff' should be between 0 and 1. We recommand using 0.15.")
if(POLMM.control$max_maf > 1 | POLMM.control$max_maf <= 0)
stop("'max_maf' should be between 0 and 1. We recommand using 0.05 or 0.01.")
method = POLMM.control$method
if(! method %in% c("SKAT", "Burden", "SKAT-O"))
stop("'method' should be 'SKAT', 'Burden', or 'SKAT-O'. Check 'Details' for more details.")
if(is.null(POLMM.control$r.corr)){
if(method == "SKAT")
POLMM.control$r.corr = 0;
if(method == "Burden")
POLMM.control$r.corr = 1;
if(method == "SKAT-O")
POLMM.control$r.corr = c(0, 0.1^2, 0.2^2, 0.3^2, 0.5^2, 0.5, 1);  # r.corr = 0 is SKAT, r.corr = 1 is Burden Test
}
if(any(POLMM.control$r.corr < 0 | POLMM.control$r.corr > 1))
stop("'r.corr' should be between 0 and 1. Check 'Details' for more details.")
return(POLMM.control)
}
POLMM.control = check.POLMM.control(POLMM.control)
POLMM.control
AnnoList = POLMM:::getAnnoList(AnnoFile)
AnnoList
c(1,2,3) == c(1,2,3)
load("C:/Users/wenji/Dropbox/software/POLMM-0.2.3/inst/SparseGRM/SparseGRM.RData")
ls()
SparseGRM
library(devtools)  # author version: 2.3.0
install_github("WenjianBi/POLMM")
library(POLMM)
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
OutputFile
?file.remove
?path
?path.expand
file.path(OutputFile)
OutputFile
?file.path
list.files(OutputFile)
?tools::file_path_as_absolute
tools::file_path_as_absolute(OutputFile)
tools::file_path_sans_ext(OutputFile)
tools::file_path_sans_exts(OutputFile)
tools::list_files_with_exts(OutputFile)
tools::list_files_with_type(OutputFile)
list.files(OutputFile)
OutputFile
?list.files
?file
OutputFile
?file.path
file.info(OutputFile)
basename(OutputFile)
dirname(OutputFile)
tempFiles = list.files(path = dirname(OutputFile),
pattern = basename(OutputFile))
tempFiles
?list.files
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0("^",basename(OutputFile),".bin$"))
tempFiles
paste0("^",basename(OutputFile),".bin$")
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0("^",basename(OutputFile),"*.bin$"))
tempFiles
paste0("^",basename(OutputFile),"*.bin$")
dirname(OutputFile)
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0("^",basename(OutputFile),"*\\.bin$"))
tempFiles
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0(basename(OutputFile),"*\\.bin$"))
tempFiles
paste0(basename(OutputFile),"*\\.bin$")
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0("\\.bin$"))
tempFiles
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0(basename(OutputFile),"*\\.bin$"))
tempFiles
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0("*\\.bin$"))
tempFiles
?list.files
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0(".*\\.bin$"))
tempFiles
?dirname
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0(basename(OutputFile),".*\\.bin$"))
tempFiles
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0("^",basename(OutputFile),".*\\.bin$"))
tempFiles
file.remove(tempFiles)
tempFiles = list.files(path = dirname(OutputFile),
pattern = paste0("^",basename(OutputFile),".*\\.bin$"),
full.names = T)
tempFiles
file.remove(tempFiles)
library(POLMM)
?POLMM.Region
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
indicator=1
library(POLMM)
?POLMM.Region
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
library(POLMM)
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
library(POLMM)
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
library(POLMM)
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
OUTPUT$VarSMat
OUTPUT1=OUTPUT
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5, memory.chunk=5))
OUTPUT$VarSMat
OUTPUT$VarSMat - OUTPUT1$VarSMat
OUTPUT
OUTPUT1
library(POLMM)
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
OUTPUT1=OUTPUT
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5, memory.chunk=10))
OUTPUT$VarSMat == OUTPUT1$VarSMat
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5, memory.chunk=12))
OUTPUT$VarSMat == OUTPUT1$VarSMat
OUTPUT$VarSMat
OUTPUT$VarSMat[1:10,1:10] == OUTPUT1$VarSMat
library(POLMM)
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
OUTPUT
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5, memory.chunk=12))
OUTPUT
500e3 * 10 * 3
500e3 * 10 * 3 * 8
n=400e3
J=10
p=10
8*(3*(n*(J-1)*p)+2*(n*p)) / 1e9
fixed.memory = 8*(3*(n*(J-1)*p)+2*(n*p)) / 1e9
memory.chunk = 4
maxMarkers = (memory.chunk - fixed.memory)/(4*n)
maxMarkers = floor(maxMarkers)
maxMarkers
memory.chunk
maxMarkers = (memory.chunk - fixed.memory)*1e9/(4*n)
maxMarkers
maxMarkers = floor(maxMarkers)
maxMarkers
library(POLMM)
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
print("ss\nss")
printf("ss\nss")
Rprintf("ss\nss")
?sprintf
sprintf("ss\nss")
library(POLMM)
?POLMM.Region
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
GenoFile = gsub("-ext.fam", "-ext.bed", famFile)
AnnoFile = system.file("extdata", "AnnoFile.txt", package = "POLMM")
OutputFile = gsub("AnnoFile","OutputFile",AnnoFile)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)
objNullFile = system.file("objNull.RData", package = "POLMM")
load(objNullFile)
chrom = 1
OUTPUT = POLMM.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile,
SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
names(OUTPUT)
library(POLMM)
library(POLMM)
library(POLMM)
install.packages("C:/Users/wenji/Dropbox/software/POLMM_0.3.0.tar.gz", repos = NULL, type = "source")
?POLMM::POLMM.Region
library(POLMM)
"sdf"
"Analyzing part (0/3,0/3) ....."
"Analyzing part (0/3,1/3) ....."
"Analyzing part (0/3,2/3) ....."
"Analyzing part (0/3, 2/3) ....."
?POLMM.Region
?SKAT:::Met_SKAT_Get_Pvalue
SKAT:::Met_SKAT_Get_Pvalue
n = 1000
wStatVec = rnorm(n)
