% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/POLMM_Gene.R
\name{POLMM.Gene}
\alias{POLMM.Gene}
\title{Test for association between genetic variants and an ordinal categorical variable via Proportional Odds Logistic Mixed Model (POLMM-Gene)}
\usage{
POLMM.Gene(
  objNull,
  GMat,
  chrom,
  SparseGRM,
  SKAT.control = NULL,
  SPAcutoff = 2,
  G.model = "Add"
)
}
\arguments{
\item{objNull}{the output of the POLMM_Null_Model() function}

\item{GMat}{a numeric genotype matrix with each row as a subject and each column as a marker in a region or gene. 
Column names of marker IDs and row names of individual IDs are required.
Missng genotype should be coded as in argument 'G.missing'. Both hard-called and imputed genotype are supported.}

\item{chrom}{a character to specify chromosome of the markers in GMat. Must be specified unless LOCO = F.}

\item{SPAcutoff}{a standard deviation cutoff (default=2). If the standardized test statistic < SPAcutoff, normal approximation is used, otherwise, saddlepoint approximation is used.}

\item{G.model}{a character string (default: "Add") to specify additive ("Add"), dominant ("Dom"), or recessive ("Rec") model. 
If "Dom", GVec = ifelse(GVec >= 1, 1, 0), if "Rec", GVec = ifelse(GVec <= 1, 0, 1). Be very careful if the gneotyp is imputed data.}

\item{maxMAF}{a cutoff of the minimal minor allele frequencies (MAFs). Any markers with MAF < minMAF will be excluded from the analysis.}

\item{maxMissing}{a cutoff of the maximal missing rate. Any markers with missing rate > maxMissing will be excluded from the analysis.}

\item{impute.method}{a character string (default: "fixed") to specify the method to impute missing genotypes.
"fixed" imputes missing genotypes (NA) by assigning the mean genotype value (i.e. 2p where p is MAF).}

\item{G.missing}{the code for missing genotype (default=NA). For plink input, G.missing = -9.}
}
\value{
an R matrix with the following elements
\item{ID}{Marker IDs from colnames(GMat)}
\item{chr}{Chromosome name from chrVec}
\item{MAF}{MAFs of the markers}
\item{missing.rate}{Missing rates of the markers}
\item{Stat}{Score statistics}
\item{VarW}{Estimated variance (VarW) from non-mixed model}
\item{VarP}{Estimated variance after adjusting for variance ratio r (VarP = VarW * r)}
\item{beta}{Estimated effect size: Stat / VarP}
\item{pval.norm}{p values calculated from normal approximation}
\item{pval.spa}{p values calculated from saddlepoint approximation}
\item{switch.allele}{a logical value indicating if the REF/ALT alleles were switched, if AF > 0.5, we use GVec = 2-GVec, and then give switch.allele=T. This is useful to estimate the effect direction.}
}
\description{
Test for association between genetic variants and an ordinal categorical variable via Proportional Odds Logistic Mixed Model (POLMM-Gene)
}
\examples{
## We use a Plink file with 10,000 markers and 1,000 subjects to constract GRM for demonstration. 
## For real data analysis, we recommend >= 100,000 common markers (MAF > 0.05 or 0.01).
## Selection of the common markers is similar as in Principle Components Analysis (PCA).
famFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.fam", package = "POLMM")
PlinkFile = gsub("-ext.fam","-ext",famFile)
dataFile = system.file("extdata", "POLMM_data.csv", package = "POLMM")

egData = data.table::fread(dataFile)

## Fit the null POLMM using the Sparse GRM
SparseGRMFile = system.file("SparseGRM", "SparseGRM.RData", package = "POLMM")
load(SparseGRMFile)   ## check getSparseGRM() for more details about how to make an R object of "SparseGRM" using Plink files. 
objNull = POLMM_Null_Model(as.factor(outcome)~Cova1+Cova2, 
                           SparseGRM = SparseGRM,
                           data=egData, PlinkFile = PlinkFile, subjData = egData$IID)
                           
## If control$seed is not changed, objNull$tau should be 0.8506
objNull$tau

## when using function POLMM(), argument chrVec should be from
names(objNull$LOCOList)

set.seed(123)
GMat = matrix(rbinom(10000,2,0.3),1000,10)
rownames(GMat) = egData$IID
colnames(GMat) = paste0("rs",1:10)
chrVec = chrom = "1"  # equivalant to chrVec = rep("1", ncol(GMat))
outPOLMM = POLMM(objNull, GMat, chrVec)

outList = POLMM.Gene(objNull, GMat, chrom, SparseGRM)

outPOLMM
outList

round(as.numeric(outPOLMM$pval.spa),2)
## [1] 0.89 0.46 0.82 0.71 0.34 0.30 0.20 0.82 0.25 0.71 # using dense GRM
## [1] 0.82 0.46 0.76 0.68 0.36 0.23 0.21 0.80 0.24 0.71 # using sparse GRM

}
